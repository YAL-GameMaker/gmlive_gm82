```set template default.html```
```set title gmlive82 cheat sheet```
```set autoapi ext```
```gmlapi fnames```
```gmlapi
live_argument
live_argument_count
console_write()
vk_crlf
```
```set intro
${"
<h1 style='transform: skewX(-5deg); margin: 0.5em 0;'>GMLive for GM8.2</h1>
"}
This is a "cheat sheet" for the "GMLive for GM8.2" extension by YellowAfterlife.

The extension can be found [on GitHub](https://github.com/YAL-GameMaker/gmlive_gm82).

For newer GameMaker versions, see [GMLive.gml](https://yellowafterlife.itch.io/gamemaker-live).
```

#[Using GMLive for GM8.2](use) {
	#[Initial setup](install) {
		--{
		-	Extract `GMLive.dll` to your project directory (next to `.gm82`).
		-	Import GMLive scripts by dragging and dropping `GMLive.gml` onto an open GM8.2 editor.\
			This should add them as individual scripts.
		-	Call `live_init()` on game start.
		-	Call `live_update()` once per frame somewhere.
		}
	}
	#[Starting up](start) {
		--{
		-	Add [live function calls](api-call) to scripts of interest.\
			You don't have to add anything to object events and timeline moments.
		-	Run the game.
		-	Change the code of interest and save the file/project
			(*this is important!*) to see changes in-game.
		-	If you are using the GameMaker 8.2 Console extension,
			the extension will report what it's doing to the console window.
		}
	}
	#[Exporting](export) {
		The extension will not do anything if it cannot find `GMLive.dll`,
		but you may also change `live_init()` to `live_init("")` to explicitly disable it
		without removing calls to it.
	}
}
#[General functions](api-general) {
	#[live_init(?dll_path, ?project_directory)]() {
		Initializes the extension's variables and starts watching the project.
		
		`dll_path` is the path to `GMLive.dll`.\
		This can be `""` to omit loading the extension.
		
		`project_directory` is the path to the directory where your `.gm82` file is.\
		By default it is assumed to be `working_directory`, which points at the project directory
		when running from GM8.2 IDE.
	}
	#[live_update()]() {
		Call once per frame or so!
		
		This function will fetch the latest changes from the DLL and apply them to the game.
	}
}
#[Live functions](api-call) {
	#[live_call(script, ...arguments)->]() {
		Calls the "live" version of a script with specified arguments (if any).
		
		Returns whether the "live" version is already loaded and was called.
		
		For example, if your `scr_test` script takes no arguments, you can do
		```gml
		/// scr_test()
		if (live_call(scr_test)) return live_result;
		```
		If your `scr_add` takes two arguments, you can do
		```gml
		/// scr_add(a, b)
		if (live_call(scr_add, argument0, argument1)) return live_result;
		return argument0 + argument1;
		```
		If the script takes a variable number of arguments, see [live_call_ext].
	}
	#[live_call_ext(script)->]() {
		Same as `live_call`, but assumed that you have stored your arguments in
		a global array called `live_argument` and their count in `live_argument_count`.
		
		Typically used like so:
		```gml
		/// scr_sum(...numbers)
		live_argument_count = argument_count;
		var a; for (a = 0; a < argument_count; a += 1) live_argument[a] = argument[a];
		if (live_call_ext(scr_sum)) return live_result;
		
		var r, i;
		r = 0;
		for (i = 0; i < argument_count; i += 1) r += argument[i];
		return r;
		```
	}
	#[live_result]() {
		Stores the returned value from the last [live_call]
		(or other "live" group functions) if execution succeeded.

		If the code did not return anything, holds `0` (GM default for exit).
	}
}
#[Limitations](lim) {
	#[Error handling](lim-errors) {
		Live-reloaded code is just "regular" code in this one
		so you may crash your game if you are not careful.
		
		You can prevent your game from closing outright on some of the errors by un-ticking the
		"Display error messages" in Game Settings âžœ Code Options and fetching the errors for display
		using `error_occurred` and `error_last`, like so:
		```gml
		if (error_occurred) {
		    console_write(error_last + vk_crlf);
		    error_last = "";
		    error_occurred = false;
		}
		```
		this would log errors into GameMaker 8.2 Console window
		that was opened using `console_open("your title")`.
	}
	#[DnD blocks](lim-dnd) {
		Only "execute code" blocks are supported in live-reloaded events and moments.
	}
}